1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table =
SELECT COUNT(*) FROM attribute

ii. Business table =
SELECT COUNT(*) FROM business

iii. Category table =
SELECT COUNT(*) FROM category

iv. Checkin table =
SELECT COUNT(*) FROM checkin

v. elite_years table =
SELECT COUNT(*) FROM elite_years

vi. friend table = 
SELECT COUNT(*) FROM friend

vii. hours table =
SELECT COUNT(*) FROM hours

viii. photo table = 
SELECT COUNT(*) FROM photo

ix. review table = 
SELECT COUNT(*) FROM review

x. tip table = 
SELECT COUNT(*) FROM tip

xi. user table =
SELECT COUNT(*) FROM user





Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business =
SELECT  DISTINCT COUNT(id) FROM business

ii. Hours =
SELECT  DISTINCT COUNT(business_id) FROM hours

iii. Category =
SELECT  DISTINCT COUNT(business_id) FROM category

iv. Attribute =
SELECT  DISTINCT COUNT(business_id) FROM attribute

v. Review =
SELECT  DISTINCT COUNT(id) FROM review

vi. Checkin = 
SELECT  DISTINCT COUNT(business_id) FROM checkin

vii. Photo =
SELECT  DISTINCT COUNT(id) FROM photo 

viii. Tip = 
SELECT  DISTINCT COUNT(user_id) FROM tip //user_id chosen as foreign key

ix. User = 
SELECT  DISTINCT COUNT(id) FROM user

x. Friend = 
SELECT  DISTINCT COUNT(user_id) friend

xi. Elite_years =
SELECT  DISTINCT COUNT(user_id) FROM elite_years


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:
	no. 
	
	SQL code used to arrive at answer:

SELECT  id, name, review_count, yelping_since, useful, funny, cool, fans, average_stars, compliment_hot, compliment_more, compliment_profile, compliment_cute, compliment_note, compliment_plain, compliment_cool, compliment_funny, compliment_writer, compliment_photos FROM user
WHERE id IS NULL OR name IS NULL OR review_count IS NULL OR yelping_since IS NULL OR useful is NULL OR funny IS NULL OR cool IS NULL OR fans IS NULL OR average_stars IS NULL OR compliment_hot IS NULL OR compliment_more IS NULL OR compliment_profile IS NULL OR compliment_cute IS NULL OR compliment_note IS NULL OR compliment_plain IS NULL OR compliment_cool IS NULL OR compliment_funny IS NULL OR compliment_writer IS NULL OR compliment_photos IS NULL






4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1	max:    5	avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg:24.2995



5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

SELECT business.city, COUNT(review.id)
FROM business 
INNER JOIN review
ON business.id = review.business_id
GROUP BY city
ORDER BY COUNT(review.id) DESC
	
	Copy and Paste the Result Below:

 Las Vegas       |
| Phoenix         |
| Toronto         |
| Scottsdale      |
| Henderson       |
| Tempe           |
| Pittsburgh      |
| Chandler        |
| Charlotte       |
| Montréal        |
| Madison         |
| Gilbert         |
| Mesa            |
| Cleveland       |
| North Las Vegas |
| Edinburgh       |
| Glendale        |
| Lakewood        |
| Cave Creek      |
| Champaign       |
| Markham         |
| North York      |
| Mississauga     |
| Surprise        |
| Avondale        |

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars, review_count
FROM business
WHERE city = 'Avon'

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+--------------+
| stars | review_count |
+-------+--------------+
|   2.5 |            3 |
|   4.0 |            4 |
|   5.0 |            3 |
|   3.5 |            7 |
|   1.5 |           10 |
|   3.5 |           31 |
|   4.5 |           31 |
|   3.5 |           50 |
|   2.5 |            3 |
|   4.0 |           17 |
+-------+--------------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars, review_count
FROM business
WHERE city = 'Beachwood'

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
+-------+--------------+
| stars | review_count |
+-------+--------------+
|   3.0 |            8 |
|   3.0 |            3 |
|   4.5 |           14 |
|   5.0 |            6 |
|   4.0 |           69 |
|   4.5 |            3 |
|   5.0 |            4 |
|   2.0 |            8 |
|   3.5 |            3 |
|   3.5 |            3 |
|   5.0 |            6 |
|   2.5 |            3 |
|   5.0 |            3 |
|   5.0 |            4 |
+-------+--------------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

SELECT name, review_count
FROM user
ORDER BY review_count DESC
LIMIT 3

		
	Copy and Paste the Result Below:
		
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

No correlation. There is no clear pattern between the number of reviews and fan count. Maybe this depends on the quality of reviews as well.

Query used: 

SELECT name, review_count, fans
FROM user
ORDER BY review_count DESC
	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:

More reviews with the word "love"
	
	SQL code used to arrive at answer:

SELECT

(SELECT COUNT(id) 
FROM review 
WHERE text LIKE '%love%') AS love, 

(SELECT COUNT(id) 
FROM review 
WHERE text LIKE '%hate%') AS hate

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

SELECT name, fans
FROM user
ORDER BY fans DESC
LIMIT 10
	
	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
City: Toronto
Category: Food



i. Do the two groups you chose to analyze have a different distribution of hours?
Yes. 

Walgreens 8:00-22:00
Sweet Ruby Jane Confections 10:00-19:00

ii. Do the two groups you chose to analyze have a different number of reviews?
         
Yes. Walgreen has more branches and more reviews.


iii. Are you able to infer anything from the location data provided between these two groups? Explain.

No, because they are in the same city and one has already one branch. Also, the sample size is too small to infer anything.



SQL code used for analysis:

		
SQL code: 
SELECT name, stars
FROM business 
INNER JOIN category
ON business.id = category.business_id
WHERE business.city = "Las Vegas" AND category.category = "Food"
GROUP BY business.stars

Result
+-----------------------------+-------+
| name                        | stars |
+-----------------------------+-------+
| Walgreens                   |   2.5 |
| Sweet Ruby Jane Confections |   4.0 |
+-----------------------------+-------+
	
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

The average checkin in open business is more than closed businesses. 

+---------------+
|          open |
+---------------+
| 1.65261044177 |
+---------------+
+--------+
| closed |
+--------+
|   1.25 |
+--------+

    
ii. Difference 2:
 
The average number of reviews in open business is more than closed businesses. 


+-------------------+
| avg(review_count) |
+-------------------+
|     23.1980263158 |
+-------------------+

+-------------------+
| avg(review_count) |
+-------------------+
|     31.7570754717 |
+-------------------+
         
SQL code used for analysis:

SELECT AVG(checkin.count) AS closed
FROM checkin
INNER JOIN business
ON business.id = checkin.business_id
WHERE is_open = 0
	
SELECT avg(review_count)
FROM business
WHERE is_open = 1


3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

I want to identify mega-cities with the most amount of different types of business that exist
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

I need the data for the number of different categories of the business and the different cities.                 
                  
iii. Output of your finished dataset:

+---------------------+-----------------+
| city                | COUNT(category) |
+---------------------+-----------------+
| Toronto             |             100 |
| Las Vegas           |              78 |
| Phoenix             |              73 |
| Chandler            |              46 |
| Charlotte           |              41 |
| Scottsdale          |              30 |
| Cleveland           |              27 |
| Tempe               |              25 |
| Mesa                |              23 |
| Henderson           |              22 |
| Mississauga         |              20 |
| Pittsburgh          |              17 |
| Edinburgh           |              11 |
| Middleton           |              10 |
| Montréal            |              10 |
| Stuttgart           |               8 |
| Oakville            |               7 |
| Brampton            |               6 |
| Medina              |               6 |
| Peoria              |               6 |
| Fitchburg           |               5 |
| Paw Creek           |               5 |
| Strongsville        |               5 |
| Stuttgart-Vaihingen |               5 |
| Surprise            |               5 |
+---------------------+-----------------+
         
iv. Provide the SQL code you used to create your final dataset:


SELECT city, COUNT(category)
FROM category
INNER JOIN business
ON business.id = category.business_id
GROUP BY city
ORDER BY COUNT(category) DESC